/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
import {IReceivedDataAtServer_addDiscordRoleID} from './IReceivedDataAtServer_addDiscordRoleID';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"useDefaults":false});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {IReceivedDataAtServer_addDiscordRoleID};
export const IReceivedDataAtServer_addDiscordRoleIDSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "gameSystemEnv": {
      "properties": {
        "gameModeID": {
          "type": "string"
        },
        "gameSystemID": {
          "type": "string"
        }
      },
      "required": [
        "gameModeID",
        "gameSystemID"
      ],
      "type": "object"
    },
    "id": {
      "type": "string"
    },
    "token": {
      "type": "string"
    }
  },
  "required": [
    "gameSystemEnv",
    "id",
    "token"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isIReceivedDataAtServer_addDiscordRoleID = ajv.compile(IReceivedDataAtServer_addDiscordRoleIDSchema) as ValidateFunction<IReceivedDataAtServer_addDiscordRoleID>;
export default function validate(value: unknown): IReceivedDataAtServer_addDiscordRoleID {
  if (isIReceivedDataAtServer_addDiscordRoleID(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isIReceivedDataAtServer_addDiscordRoleID.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'IReceivedDataAtServer_addDiscordRoleID'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
