/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
import {IReceivedDataAtServer_pickUp_UseSIdMIdAIdId} from './IReceivedDataAtServer_pickUp_UseSIdMIdAIdId';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"useDefaults":false});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {IReceivedDataAtServer_pickUp_UseSIdMIdAIdId};
export const IReceivedDataAtServer_pickUp_UseSIdMIdAIdIdSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "abilityAttributeID": {
      "type": "string"
    },
    "gameSystemEnv": {
      "properties": {
        "gameModeID": {
          "type": "string"
        },
        "gameSystemID": {
          "type": "string"
        }
      },
      "required": [
        "gameModeID",
        "gameSystemID"
      ],
      "type": "object"
    },
    "id": {
      "type": "string"
    }
  },
  "required": [
    "abilityAttributeID",
    "gameSystemEnv",
    "id"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isIReceivedDataAtServer_pickUp_UseSIdMIdAIdId = ajv.compile(IReceivedDataAtServer_pickUp_UseSIdMIdAIdIdSchema) as ValidateFunction<IReceivedDataAtServer_pickUp_UseSIdMIdAIdId>;
export default function validate(value: unknown): IReceivedDataAtServer_pickUp_UseSIdMIdAIdId {
  if (isIReceivedDataAtServer_pickUp_UseSIdMIdAIdId(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isIReceivedDataAtServer_pickUp_UseSIdMIdAIdId.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'IReceivedDataAtServer_pickUp_UseSIdMIdAIdId'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
