/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
import {IReceivedDataAtServer_notificationRead} from './IReceivedDataAtServer_notificationRead';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"useDefaults":false});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {IReceivedDataAtServer_notificationRead};
export const IReceivedDataAtServer_notificationReadSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "idToken": {
      "type": "string"
    }
  },
  "required": [
    "idToken"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isIReceivedDataAtServer_notificationRead = ajv.compile(IReceivedDataAtServer_notificationReadSchema) as ValidateFunction<IReceivedDataAtServer_notificationRead>;
export default function validate(value: unknown): IReceivedDataAtServer_notificationRead {
  if (isIReceivedDataAtServer_notificationRead(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isIReceivedDataAtServer_notificationRead.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'IReceivedDataAtServer_notificationRead'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
